summary(prediction)
RMSE(testing$CompressiveStrength, prediction)
library(forecast)
library(lubridate) # For year() function below
dat = read.csv("C:/Users/rbechtel/Desktop/gaData.csv, string")
dat$date <- as.Date(dat$date, "%m/%d/%Y")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
tstest <- ts(testing$visitsTumblr)
fit <- bats(tstrain)
library(forecast)
library(lubridate) # For year() function below
dat$date <- as.Date(dat$date, "%m/%d/%Y")
dat = read.csv("C:/Users/rbechtel/Desktop/gaData.csv, string")
dat = read.csv("C:/Users/rbechtel/Desktop/gaData.csv")
dat$date <- as.Date(dat$date, "%m/%d/%Y")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
tstest <- ts(testing$visitsTumblr)
fit <- bats(tstrain)
accuracy(fit, tstest)
fcast <- forecast(fit)
plot(fcast)
View(training)
View(testing)
View(training)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
model.rf <- train(diagnosis ~ . , data = training, method = "rf")
model.gbm <- train(diagnosis ~ . , data = training, method = "gbm")
model.lda <- train(diagnosis ~ . , data = training, method = "lda")
predict.rf <- predict(model.rf, testing)
predict.gbm <- predict(model.gbm, testing)
predict.lda <- predict(model.lda, testing)
pred.DF <- data.frame(predict.rf, predict.gbm, predict.lda, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~ ., method = "rf", data= pred.DF)
combPred <- predict(combModFit, pred.DF)
comb_accuracy <- sum(combPred == testing$diagnosis)/length(combPred)
rf.accuracy <- sum(predict.rf == testing$diagnosis)/length(predict.rf)
gbm.accuracy <- sum(predict.gbm == testing$diagnosis)/length(predict.gbm)
lda.accuracy <- sum(predict.lda == testing$diagnosis)/length(predict.lda)
comb_accuracy;rf.accuracy;gbm.accuracy;lda.accuracy
library(forecast)
library(lubridate) # For year() function below
dat = read.csv("C:/Users/rbechtel/Desktop/gaData.csv")
dat$date <- as.Date(dat$date, "%m/%d/%Y")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
tstest <- ts(testing$visitsTumblr)
model <- bats(tstrain)
fcast <- forecast.bats(model, level = 0.95, h = nrow(testing))
accuracy(fcast, testing$visitsTumblr)
View(testing)
View(dat)
acc <- sum(testing$visitsTumblr <= fcast$upper)/nrow(testing)
library(shiny)
ui <- fluidPage()
server <- function(input, output){
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage("Hello World")
server <- function(input, output){
}
shinyApp(ui = ui, server = server)
data(cars)
cars
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
install.packages("manipulate")
myplot(s = 4)
myPlot(s = 4)
myPlot(s = 2)
myPlot(s = .5)
library(manipulate)
library(rCharts)
install.packages("rCharts")
library(rCharts)
install.packages("rCharts")
require(devtools)
install.packages("rtools")
install.packages("rtools")
install.packages("rtools")
install.packages("RCharts")
install.packages("Rtools")
server.R
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/Lecture Examples')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/Lecture Examples')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/quiz1')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/quiz1')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/quiz1')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/quiz1')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/quiz1')
library(shiny)
ui <- fluidPage("Hello World")
server <- function(input, output){
}
shinyApp(ui = ui, server = server)
library(shiny)
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/Lecture Examples/shiny2')
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
)
server <- function(input, output){
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",                   #input value stored as "num"
label = "Choose a number",         #provide way to explain the user what to input
value = 25, min = 1, max = 100),    #set default, min and max
plotOutput(outputId = "hist")
)
server <- function(input, output){
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",                   #input value stored as "num"
label = "Choose a number",         #provide way to explain the user what to input
value = 25, min = 1, max = 100),    #set default, min and max
plotOutput(outputId = "hist")
)
server <- function(input, output){
output$hist <- renderPlot({
hist(rnorm(input$num), main = "Title")
})
}
shinyApp(ui = ui, server = server)
devtools::install_github("rsudio/shinyapps")
devtools::install_github("rstudio/shinyapps")
devtools::install_github("rstudio/shinyapps")
install.packages("digest")
devtools::install_github("rstudio/shinyapps")
devtools::install_github('rstudio/rsconnect')
rsconnect::setAccountInfo(name='bikecommuterdc',
token='58CE5DF19D23C8BD0E70728C48AE7B4F',
secret='<SECRET>')
rsconnect::setAccountInfo(name='bikecommuterdc',
token='58CE5DF19D23C8BD0E70728C48AE7B4F',
secret='R0dCQ1XahhHkVViYr6j5nPVBUB4dHUTgyobxcWGp')
library(rsconnect)
rsconnect::deployApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/Lecture Examples/shiny2')
library(devtools)
install_github("slidify","ramnathv")
install_github('slidigyLibraries','ramnathv/slidify')
getOption("defaultPackages")
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
install.packages("rsconnect")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='bikecommuterdc',
token='58CE5DF19D23C8BD0E70728C48AE7B4F',
secret='<SECRET>')
library(rsconnect)
rsconnect::setAccountInfo(name='bikecommuterdc',
token='58CE5DF19D23C8BD0E70728C48AE7B4F',
secret='<SECRET>')
library(rsconnect)
library("rsconnect")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='bikecommuterdc',
token='58CE5DF19D23C8BD0E70728C48AE7B4F',
secret='<SECRET>')
rsconnect::setAccountInfo(name='bikecommuterdc',
token='58CE5DF19D23C8BD0E70728C48AE7B4F',
secret='R0dCQ1XahhHkVViYr6j5nPVBUB4dHUTgyobxcWGp')
rsconnect::setAccountInfo(name='bikecommuterdc', token='58CE5DF19D23C8BD0E70728C48AE7B4F', secret='R0dCQ1XahhHkVViYr6j5nPVBUB4dHUTgyobxcWGp')
library(rsconnect)
rsconnect::deployApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/project_path')
library(rsconnect)
rsconnect::deployApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
shiny::runApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
library(rsconnect)
rsconnect::deployApp('C:/Users/rbechtel/Dropbox/Coursera/9_Developing_Data_Products/project/mtcars')
For more details on authoring R presentations click the
- Bullet 1
What it does
========================================================
summary(cars)
font-family: 'Risque'
ggplot(mtcars, aes(wt,mpg))+
geom_point(aes(color = cyl),size = 5)+
geom_smooth(method = lm)+
theme(axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
library(ggplot2)
ggplot(mtcars, aes(wt,mpg))+
geom_point(aes(color = cyl),size = 5)+
geom_smooth(method = lm)+
theme(axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
path <- file.path("C:/Users/rbechtel/Documents/Coursera/10_Capstone/raw_data")
path
dir(path)
library(tm)
docs <- Corpus(DirSource(path))
inspect(docs[1])
inspect(docs)
```{r, load data and packages}
library(tm)
path <- file.path("C:/Users/rbechtel/Documents/Coursera/10_Capstone/raw_data")
docs <- Corpus(DirSource(path))
library(tm)
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, tolower)
sample.path <- "C:/Users/rbechtel/Documents/Coursera/10_Capstone/raw_data/samples"
docs <- Corpus(DirSource(sample.path))
library(tm)
sample.path <- "C:/Users/rbechtel/Documents/Coursera/10_Capstone/raw_data/samples"
docs <- Corpus(DirSource(sample.path))
inspect(docs[1])[1]
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, tolower)
docs <- tm_map(docs, removeWords, stopwords("english"))
dtm <- DocumentTermMatrix(docs)
dtm <- DocumentTermMatrix(docs)
docs <- tm_map(docs, stripWhitespace)
docs <- tm_map(docs, PlainTextDocument)
dtm <- DocumentTermMatrix(docs)
library(tm)
library(dplyr)
library(ggplot2)
library(wordcloud)
library(stringr)
library(qdapRegex)
sample.path <- "C:/Users/rbechtel/Documents/Coursera/10_Capstone/raw_data/samples"
docs <- Corpus(DirSource(sample.path))
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, remove)
docs <- tm_map(docs, removeWords, stopwords("english"))
docs <- tm_map(docs, tolower)
docs <- tm_map(docs, stripWhitespace)
docs <- tm_map(docs, PlainTextDocument)
dtm <- DocumentTermMatrix(docs)
inspect(dtm)
inspectdtm
dtm
dtms <- removeSparseTerms(dtm,0.1)
dtms
wf <- data.frame(word=names(freq), freq=freq, stringsAsFactors = FALSE)
freq <- colSums(as.matrix(dtms))
wf <- data.frame(word=names(freq), freq=freq, stringsAsFactors = FALSE)
wf.barplot <- wf %>%
arrange(desc(freq)) %>%
top_n(50,freq)
wf.barplot <- transform(wf.barplot, word  = reorder(word,freq))
wf.barplot <- transform(wf.barplot, word  = reorder(word,freq))
p <- ggplot(wf.barplot, aes(word, freq))  +
geom_bar(stat="identity")   +
theme(axis.text.x=element_text(angle=45))  +
coord_flip()
p
docs <- tm_map(docs, removeWords, stopwords("english"))
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, removeWords, stopwords("english"))
docs <- tm_map(docs, tolower)
docs <- tm_map(docs, stripWhitespace)
docs <- tm_map(docs, PlainTextDocument)
dtm <- DocumentTermMatrix(docs)
library(rJava)
library(RWeka)
BigramTokenizer <-
function(x)
unlist(lapply(ngrams(words(x), 2), paste, collapse = " "), use.names = FALSE)
BigramTokenizer <-  function(x) unlist(lapply(ngrams(words(x), 2), paste, collapse = " "), use.names = FALSE)
dtm2 <- DocumentTermMatrix(docs,  control = list(tokenize = BigramTokenizer))
dtms2 <- removeSparseTerms(dtm2,0.2)
ddtms
dtms2
inspect(dtms2)
TrigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 3, max = 3))
dtm3 <- DocumentTermMatrix(docs,  control = list(tokenize = TrigramTokenizer))
dtm3
inspect dtm3
inspect(dtm3)
dtm1 <- DocumentTermMatrix(docs)
dtms2 <- removeSparseTerms(dtm2,0.2)
freq <- colSums(as.matrix(dtms2))
wf <- data.frame(word=names(freq), freq=freq, stringsAsFactors = FALSE)
wf.barplot <- wf %>%
arrange(desc(freq)) %>%
top_n(50,freq)
View(wf.barplot)
p <- ggplot(wf.barplot, aes(word, freq))  +
geom_bar(stat="identity")   +
theme(axis.text.x=element_text(angle=45))  +
coord_flip()
p
wf.barplot <- transform(wf.barplot, word = reorder(word,freq))
p <- ggplot(wf.barplot, aes(word, freq))  +
geom_bar(stat="identity")   +
theme(axis.text.x=element_text(angle=45))  +
coord_flip()
p
createFreqGraphics <- function(matrix){
freq <- colSums(as.matrix(matrix))
wf <- data.frame(word=names(freq), freq=freq, stringsAsFactors = FALSE)
wf.barplot <- wf %>%
arrange(desc(freq)) %>%
top_n(50,freq)
wf.barplot <- transform(wf.barplot, word = reorder(word,freq))
p <- ggplot(wf.barplot, aes(word, freq))  +
geom_bar(stat="identity")   +
theme(axis.text.x=element_text(angle=45))  +
coord_flip()
p
wordcloud(wf$word, wf$freq, max.words = 200)
}
dtms1 <- removeSparseTerms(dtm1,0.2)
dtms2 <- removeSparseTerms(dtm2,0.2)
dtms3 <- removeSparseTerms(dtm3,0.2)
createFreqGraphics(dtms1)
createFreqGraphics(dtms1)
createFreqGraphics <- function(matrix){
freq <- colSums(as.matrix(matrix))
wf <- data.frame(word=names(freq), freq=freq, stringsAsFactors = FALSE)
wf.barplot <- wf %>%
arrange(desc(freq)) %>%
top_n(50,freq)
wf.barplot <- transform(wf.barplot, word = reorder(word,freq))
ggplot(wf.barplot, aes(word, freq))  +
geom_bar(stat="identity")   +
theme(axis.text.x=element_text(angle=45))  +
coord_flip()
wordcloud(wf$word, wf$freq, max.words = 200)
}
createFreqGraphics(dtms1)
createFreqGraphics <- function(matrix){
freq <- colSums(as.matrix(matrix))
wf <- data.frame(word=names(freq), freq=freq, stringsAsFactors = FALSE)
wf.barplot <- wf %>%
arrange(desc(freq)) %>%
top_n(50,freq)
wf.barplot <- transform(wf.barplot, word = reorder(word,freq))
ggplot(wf.barplot, aes(word, freq))  +
geom_bar(stat="identity")   +
theme(axis.text.x=element_text(angle=45))  +
coord_flip()
#wordcloud(wf$word, wf$freq, max.words = 200)
}
createFreqGraphics(dtms1)
createFreqGraphics <- function(matrix){
freq <- colSums(as.matrix(matrix))
wf <- data.frame(word=names(freq), freq=freq, stringsAsFactors = FALSE)
wf.barplot <- wf %>%
arrange(desc(freq)) %>%
top_n(50,freq)
wf.barplot <- transform(wf.barplot, word = reorder(word,freq))
ggplot(wf.barplot, aes(word, freq))  +
geom_bar(stat="identity")   +
theme(axis.text.x=element_text(angle=45))  +
coord_flip()
wordcloud(wf$word, wf$freq, max.words = 200)
}
createFreqGraphics(dtms1)
createFreqGraphics(dtms2)
createFreqGraphics(dtms3)
createFreqGraphics <- function(matrix){
freq <- colSums(as.matrix(matrix))
wf <- data.frame(word=names(freq), freq=freq, stringsAsFactors = FALSE)
wf.barplot <- wf %>%
arrange(desc(freq)) %>%
top_n(50,freq)
wf.barplot <- transform(wf.barplot, word = reorder(word,freq))
ggplot(wf.barplot, aes(word, freq))  +
geom_bar(stat="identity")   +
theme(axis.text.x=element_text(angle=45))  +
coord_flip()
#wordcloud(wf$word, wf$freq, max.words = 100)
}
createFreqGraphics(dtms1)
createFreqGraphics(dtms2)
createFreqGraphics(dtms3)
dev.off()
createFreqGraphics(dtms1)
createFreqGraphics(dtms2)
createFreqGraphics(dtms3)
TwoGramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 2, max = 2))
ThreeGramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 3, max = 3))
FourGramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 4, max = 4))
FiveGramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 5, max = 5))
dtm4 <- DocumentTermMatrix(docs,  control = list(tokenize = FourgramTokenizer))
dtm5 <- DocumentTermMatrix(docs,  control = list(tokenize = FivegramTokenizer))
dtm2 <- DocumentTermMatrix(docs,  control = list(tokenize = TwoGramTokenizer))
dtm2 <- DocumentTermMatrix(docs,  control = list(tokenize = TwoGramTokenizer))
dtm3 <- DocumentTermMatrix(docs,  control = list(tokenize = ThreeGramTokenizer))
dtm4 <- DocumentTermMatrix(docs,  control = list(tokenize = FourGramTokenizer))
dtm5 <- DocumentTermMatrix(docs,  control = list(tokenize = FiveGramTokenizer))
dtms1 <- removeSparseTerms(dtm1,0.2)
dtms2 <- removeSparseTerms(dtm2,0.2)
dtms3 <- removeSparseTerms(dtm3,0.2)
dtms4 <- removeSparseTerms(dtm4,0.2)
dtms5 <- removeSparseTerms(dtm5,0.2)
createFreqGraphics(dtms4)
createFreqGraphics(dtms5)
createFreqGraphics(dtms5)
createFreqGraphics(dtms3)
createFreqGraphics(dtms2)
createFreqGraphics(dtms3)
library(qdapRegex)
options(java.parameters = "-Xmx1024m")
library(tm)
library(dplyr)
library(ggplot2)
library(wordcloud)
library(stringr)
library(qdapRegex)
options(java.parameters = "-Xmx1024m")
library(XLConnect)
library(rJava)
library(RWeka)
library(RColorBrewer)
sample.path <- "C:/Users/rbechtel/Documents/Coursera/10_Capstone/raw_data/samples"
docs <- Corpus(DirSource(sample.path))
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, removeWords, stopwords("english"))
docs <- tm_map(docs, tolower)
docs <- tm_map(docs, stripWhitespace)
docs <- tm_map(docs, PlainTextDocument)
FourGramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 4, max = 4))
dtm4 <- removeSparseTerms(DocumentTermMatrix(docs,  control = list(tokenize = FourGramTokenizer)), 0.5)
saveRDS(dtm4, "dtm4.rds")
shiny::runApp('Coursera/10_Capstone/shiny')
shiny::runApp('Coursera/10_Capstone/shiny')
setwd("~/Coursera/10_Capstone/shiny")
shiny::runApp()
getwd()
top.unigrams <- readRDS("data/topUnigrams.rds")
shiny::runApp()
shiny::runApp()
getwd()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
getwd()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(top.unigrams)
top.unigrams <- readRDS("topUnigrams.rds")
View(trigram.small)
saveRDS(bigram.small,"./lookups/bigram.small.rds")
setwd("C:/Users/rbechtel/Documents/Coursera/10_Capstone")
saveRDS(bigram.small,"./lookups/bigram.small.rds")
top.unigrams <- bigram.s %>%
group_by(post) %>%
summarize(freq = sum(freq)) %>%
arrange(desc(freq)) %>%
filter(post != "UNK") %>%
select(post, post)
top.unigrams$post1 <- top.unigrams$post
top.unigrams <- top.unigrams[1:5,]
top.unigrams <- data.frame(top.unigrams)
shiny::runApp('shiny')
shiny::runApp('shiny')
